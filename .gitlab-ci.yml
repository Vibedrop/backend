stages:
  - build
  - test
  - deploy
  - teardown

#############################################
# 1) Bygg backend-imagen
#############################################
build:
  image: docker:20
  stage: build
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - |
      # Sätt DOCKER_TAG till "latest" om main, annars använd branch-namnet
      if [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]]; then
        DOCKER_TAG="latest"
      else
        DOCKER_TAG="$CI_COMMIT_REF_NAME"
      fi
      echo "Bygger $CI_REGISTRY_IMAGE:$DOCKER_TAG"
      
      # Bygg hela Docker-imagen (inte bara base-steget) och pusha till registret
      docker buildx build \
        --cache-from="$CI_REGISTRY_IMAGE:latest" \
        -t "$CI_REGISTRY_IMAGE:$DOCKER_TAG" \
        --push \
        .
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts
        - docker-compose.yml
        - .gitlab-ci.yml
        - prisma/schema.prisma
        - prisma/migrations/**/*
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts
        - docker-compose.yml
        - .gitlab-ci.yml
        - prisma/schema.prisma
        - prisma/migrations/**/*

        
#############################################
# 2) Bygg "utils"-imagen
#############################################
build-utils:
  image: docker:20
  stage: build
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - |
      echo "Bygger $CI_REGISTRY_IMAGE/utils:latest"
      docker buildx build \
        --cache-from="$CI_REGISTRY_IMAGE/utils:latest" \
        -t "$CI_REGISTRY_IMAGE/utils:latest" \
        --push \
        -f Dockerfile-utils \
        .
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile-utils

#############################################
# 3) Test-job (för att stoppa deploy vid fel)
#############################################
             
test:
  stage: test
  image: docker:20
  services:
    - docker:20-dind
  needs: [build]  # Vänta på att build-jobbet är klart
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - |
      if [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]]; then
        DOCKER_TAG="latest"
      else
        DOCKER_TAG="$CI_COMMIT_REF_NAME"
      fi
  script:
    - |
      apk add --no-cache curl

      # Döda gammal container om den finns
      export CONTAINER_NAME="backend-test-${CI_JOB_ID}"
      docker rm -f "${CONTAINER_NAME}" || true

      # Pulla rätt backend-image
      docker pull "$CI_REGISTRY_IMAGE:$DOCKER_TAG"

      # Starta backend-containern
      docker run -d --name "${CONTAINER_NAME}" -P \
        -e NODE_ENV=production \
        -e DATABASE_URL="$DATABASE_URL" \
        -e S3_BUCKET_NAME="$S3_BUCKET_NAME" \
        -e S3_REGION="$S3_REGION" \
        -e S3_ACCESS_KEY_ID="$S3_ACCESS_KEY_ID" \
        -e S3_SECRET_ACCESS_KEY="$S3_SECRET_ACCESS_KEY" \
        -e S3_ENDPOINT="$S3_ENDPOINT" \
        "$CI_REGISTRY_IMAGE:$DOCKER_TAG"

      # Vänta lite för säkerhets skull
      sleep 10

      # Kolla att containern är running
      export IS_RUNNING=$(docker inspect --format '{{.State.Running}}' "${CONTAINER_NAME}")
      echo "Container Running: ${IS_RUNNING}"

      if [ "${IS_RUNNING}" != "true" ]; then
        echo "Backend container startade inte korrekt."
        docker logs "${CONTAINER_NAME}"
        exit 1
      fi

      echo "Test OK! Backend-container startades korrekt."

      # Städa bort containern
      docker rm -f "${CONTAINER_NAME}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts
        - docker-compose.yml
        - .gitlab-ci.yml
        - prisma/schema.prisma
        - prisma/migrations/**/*
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always


#############################################
# 4) Deploy-job för Merge Requests (review)
#############################################
deploy_review:
  stage: deploy
  image: "$CI_REGISTRY_IMAGE/utils:latest"
  environment:
    name: "review-$CI_COMMIT_REF_NAME"
    url: "https://review-$CI_COMMIT_REF_NAME.cc25.chasacademy.dev"
    on_stop: stop_review
  rules:
    - if: $CI_MERGE_REQUEST_ID
  script:
    - |
      set -e

      echo "Loggar in i Portainer..."
      export PORTAINER_TOKEN=$(curl -s -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')

      export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
      export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')
      export CI_ENVIRONMENT_SLUG="review-$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')"
      export DOCKER_TAG="$CI_COMMIT_REF_NAME"

      echo "STACK_NAME: $STACK_NAME"
      echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"

      # Kontroll: maxlängd 63 tecken
      if [ ${#NORMALIZED_STACK_NAME} -gt 63 ]; then
        echo "ERROR: Stack name '$NORMALIZED_STACK_NAME' är ${#NORMALIZED_STACK_NAME} tecken långt (max 63 tillåtet)"
        exit 1
      fi

      echo "Genererar deploybar docker-compose..."
      envsubst < docker-compose.yml > deployable-compose.yml
      cat deployable-compose.yml

      echo "Hämtar endpoint och swarm info..."
      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')

      export SWARM_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

      if [ -z "$STACK_ID" ]; then
        echo "Skapar ny stack $NORMALIZED_STACK_NAME"
        curl -X POST \
          "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          -F Name="$NORMALIZED_STACK_NAME" \
          -F SwarmID="$SWARM_ID" \
          -F file=@deployable-compose.yml \
          | jq
      else
        echo "Uppdaterar existerande stack $STACK_ID ($NORMALIZED_STACK_NAME)"
        COMPOSE_CONTENTS=$(cat deployable-compose.yml)
        JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
          '{"prune": true, "pullImage": true, "stackFileContent": $compose}')
        curl -X PUT \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          --json "$JSON_PAYLOAD" \
          | jq
      fi


#############################################
# 5) Deploy-job för main (production)
#############################################
deploy_main:
  stage: deploy
  image: "$CI_REGISTRY_IMAGE/utils:latest"
  environment:
    name: "production"
    url: "https://vibedrop-backend.cc25.chasacademy.dev"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  script:
    - |
      set -e
      # Logga in i Portainer
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')

      # Bygg stack-namn
      export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
      export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

      # För main => hårdkoda domain + Docker-tag
      export CI_ENVIRONMENT_SLUG="vibedrop-backend"
      export DOCKER_TAG="latest"
      echo "STACK: $STACK_NAME"
      echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
      echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
      echo "DOCKER_TAG: $DOCKER_TAG"

      # Generera docker-compose
      envsubst < docker-compose.yml > deployable-compose.yml
      cat deployable-compose.yml

      # Hämta endpoint & swarm
      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')
      export SWARM_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

      # Kolla om stack redan finns
      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

      # Skapa eller uppdatera
      if [ -z "$STACK_ID" ]; then
        echo "Skapar stack $NORMALIZED_STACK_NAME"
        curl -X POST \
          "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          -F Name="$NORMALIZED_STACK_NAME" \
          -F SwarmID="$SWARM_ID" \
          -F file=@deployable-compose.yml \
          | jq
      else
        echo "Uppdaterar stack $STACK_ID ($NORMALIZED_STACK_NAME)"
        COMPOSE_CONTENTS=$(cat deployable-compose.yml)
        JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
          '{"prune": true, "pullImage": true, "stackFileContent": $compose}')
        curl -X PUT \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          --json "$JSON_PAYLOAD" \
          | jq
      fi

#############################################
# 6) Teardown-job för att stoppa review
#############################################
stop_review:
  stage: teardown
  image: "$CI_REGISTRY_IMAGE/utils:latest"
  environment:
    name: "review-$CI_COMMIT_REF_NAME"
    action: stop
  rules:
    # Kör manuellt via GitLab UI
    - if: $CI_MERGE_REQUEST_ID
      when: manual

    # Kör automatiskt när MR stängs eller mergas
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_STATE == "merged"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_STATE == "closed"'
      when: always
  script:
    - |
      set -e
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')
      export STACK_NAME=$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
      echo "STACK: $STACK_NAME"
      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')
      echo "Endpoint: $ENDPOINT_ID"
      NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')
      echo "Kollar om stack $NORMALIZED_STACK_NAME finns..."
      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')
      echo "Stack id: \"$STACK_ID\""
      if [ -z "$STACK_ID" ]
      then
        echo "Stack $STACK_ID $STACK_NAME hittades inte!"
        exit 1
      else 
        echo "Tar bort stack $STACK_ID ($STACK_NAME)"
        response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN")
        if [ "$response" -eq 204 ]; then
          echo "Stack $STACK_ID raderades framgångsrikt."
        else
          echo "Misslyckades med att ta bort stack $STACK_ID. HTTP-statuskod: $response"
          exit 1
        fi
      fi

