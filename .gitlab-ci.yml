stages:
  - build
  - deploy
  - teardown

build-api:
  image: docker:20
  stage: build
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - |
      if [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]]; then
        DOCKER_TAG=latest
      else
        DOCKER_TAG="$CI_COMMIT_REF_NAME"
      fi
    - echo "Building $CI_REGISTRY_IMAGE:$DOCKER_TAG"
    - docker buildx build --cache-from=$CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$DOCKER_TAG --push --target=base .
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts

build-utils:
  image: docker:20
  stage: build
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - echo "Building $CI_REGISTRY_IMAGE/utils:latest"
    - docker buildx build --cache-from=$CI_REGISTRY_IMAGE/utils:latest -t $CI_REGISTRY_IMAGE/utils:latest --push -f Dockerfile-utils .
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile-utils

deploy:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/utils:latest
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.cc25.chasacademy.dev/docs
    on_stop: stop_review
  script:
    - |
      set -e

      # Log into Portainer
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' | jq -r '.jwt')

      # Define stack and dynamic environment names
      export STACK_NAME=$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
      export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr -cd '[:alnum:]_-')
      export CI_ENVIRONMENT_SLUG=$CI_ENVIRONMENT_SLUG

      if [[ $CI_COMMIT_REF_NAME = $CI_DEFAULT_BRANCH ]]; then 
        DOCKER_TAG=latest
      else 
        DOCKER_TAG=$CI_COMMIT_REF_NAME
      fi
      export DOCKER_TAG
      echo "STACK: $STACK_NAME"
      echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
      echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
      echo "DOCKER_TAG set to $DOCKER_TAG"

      # Fill in docker-compose template with environment variables
      envsubst < docker-compose.yml > deployable-compose.yml
      cat deployable-compose.yml

      # Get Portainer endpoint and swarm IDs dynamically
      export ENDPOINT_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/endpoints" | jq -r '.[] | select(.Name=="primary") | .Id')
      echo "Endpoint: $ENDPOINT_ID"
      export SWARM_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/endpoints" | jq -r '.[] | select(.Name=="primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')
      echo "Swarm: $SWARM_ID"

      # Check if the stack exists
      STACK_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/stacks" | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name==$NAME) | .Id')
      echo "Stack id: \"$STACK_ID\""

      if [ -z "$STACK_ID" ]; then
        echo "Creating stack $STACK_NAME"
        curl -X POST "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          -F Name="$NORMALIZED_STACK_NAME" \
          -F SwarmID="$SWARM_ID" \
          -F file=@deployable-compose.yml | jq
      else 
        echo "Updating stack $STACK_ID ($STACK_NAME)"
        COMPOSE_CONTENTS=$(cat deployable-compose.yml)
        JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" '{"prune": true, "pullImage": true, "stackFileContent": $compose}')
        curl -X PUT "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          --json "$JSON_PAYLOAD" | jq
      fi

stop_review:
  stage: teardown
  image: $CI_REGISTRY_IMAGE/utils:latest
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
  script:
    - |
      set -e
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' | jq -r '.jwt')
      export STACK_NAME=$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
      echo "STACK: $STACK_NAME"
      export ENDPOINT_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/endpoints" | jq -r '.[] | select(.Name=="primary") | .Id')
      echo "Endpoint: $ENDPOINT_ID"
      export SWARM_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/endpoints" | jq -r '.[] | select(.Name=="primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')
      echo "Swarm: $SWARM_ID"
      NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr -cd '[:alnum:]_-')
      echo "Checking if stack $NORMALIZED_STACK_NAME is present..."
      STACK_ID=$(curl -sSL -H "Authorization: Bearer $PORTAINER_TOKEN" "https://portainer.cc25.chasacademy.dev/api/stacks" | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name==$NAME) | .Id')
      echo "Stack id: \"$STACK_ID\""
      if [ -z "$STACK_ID" ]; then
        echo "Stack $STACK_ID $STACK_NAME not found!"
        exit 1
      else 
        echo "Deleting stack $STACK_ID ($STACK_NAME)"
        curl -X DELETE "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN"
      fi
      
