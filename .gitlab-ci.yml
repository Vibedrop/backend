stages:
  - build
  - deploy
  - teardown

#############################################
# 1) Build usual backend-image
#############################################
build:
  image: docker:20
  stage: build
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - |
      # Sätt DOCKER_TAG till "latest" om main, annars branch-namnet
      if [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]]; then
        DOCKER_TAG="latest"
      else
        DOCKER_TAG="$CI_COMMIT_REF_NAME"
      fi

      echo "Building $CI_REGISTRY_IMAGE:$DOCKER_TAG"

      # Bygg base-steget och pusha
      docker buildx build \
        --cache-from="$CI_REGISTRY_IMAGE:latest" \
        -t "$CI_REGISTRY_IMAGE:$DOCKER_TAG" \
        --push \
        --target=base \
        .
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile
        - package.json
        - package-lock.json
        - tsconfig.json
        - src/**/*.ts

#############################################
# 2) Build "utils"-image
#############################################
build-utils:
  image: docker:20
  stage: build
  before_script:
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - |
      echo "Building $CI_REGISTRY_IMAGE/utils:latest"
      docker buildx build \
        --cache-from="$CI_REGISTRY_IMAGE/utils:latest" \
        -t "$CI_REGISTRY_IMAGE/utils:latest" \
        --push \
        -f Dockerfile-utils \
        .
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile-utils


#############################################
# 3) Deploy-job for Merge Requests (review)
#############################################
deploy_review:
  stage: deploy
  image: "$CI_REGISTRY_IMAGE/utils:latest"
  
  environment:
    name: "review-$CI_COMMIT_REF_NAME"
    url: "https://review-$CI_COMMIT_REF_NAME.cc25.chasacademy.dev"
    on_stop: stop_review

  rules:
    - if: $CI_MERGE_REQUEST_ID

  script:
    - |
      set -e
      # Logga in i Portainer
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')

      # Bygg stack-namn med namespace, repo och gren
      export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"

      # Normalisera (ta bort mellanslag, specialtecken etc.)
      export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

      # Sätt environment slug & Docker-tag
      export CI_ENVIRONMENT_SLUG="review-$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')"
      export DOCKER_TAG="$CI_COMMIT_REF_NAME"

      echo "STACK: $STACK_NAME"
      echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
      echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
      echo "DOCKER_TAG: $DOCKER_TAG"

      # Generera docker-compose med envsubst
      envsubst < docker-compose.yml > deployable-compose.yml
      cat deployable-compose.yml

      # Hämta endpoint och swarm ID
      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')

      export SWARM_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

      # Kolla om stack redan finns
      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

      # Skapa eller uppdatera stack
      if [ -z "$STACK_ID" ]; then
        echo "Creating stack $NORMALIZED_STACK_NAME"
        curl -X POST \
          "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          -F Name="$NORMALIZED_STACK_NAME" \
          -F SwarmID="$SWARM_ID" \
          -F file=@deployable-compose.yml \
          | jq
      else
        echo "Updating stack $STACK_ID ($NORMALIZED_STACK_NAME)"
        COMPOSE_CONTENTS=$(cat deployable-compose.yml)
        JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
          '{"prune": true, "pullImage": true, "stackFileContent": $compose}')
        curl -X PUT \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          --json "$JSON_PAYLOAD" \
          | jq
      fi

#############################################
# 4) Deploy-job for main (production)
#############################################
deploy_main:
  stage: deploy
  image: "$CI_REGISTRY_IMAGE/utils:latest"

  environment:
    name: "production"
    url: "https://vibedrop-backend.cc25.chasacademy.dev"

  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

  script:
    - |
      set -e
      # Logga in i Portainer
      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')

      # Bygg stack-namn
      export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
      export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

      # För main => hårdkoda domain + Docker-tag
      export CI_ENVIRONMENT_SLUG="vibedrop-backend"
      export DOCKER_TAG="latest"

      echo "STACK: $STACK_NAME"
      echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
      echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
      echo "DOCKER_TAG: $DOCKER_TAG"

      # Generera docker-compose
      envsubst < docker-compose.yml > deployable-compose.yml
      cat deployable-compose.yml

      # Hämta endpoint & swarm
      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')

      export SWARM_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

      # Kolla om stack redan finns
      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

      # Skapa eller uppdatera
      if [ -z "$STACK_ID" ]; then
        echo "Creating stack $NORMALIZED_STACK_NAME"
        curl -X POST \
          "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          -F Name="$NORMALIZED_STACK_NAME" \
          -F SwarmID="$SWARM_ID" \
          -F file=@deployable-compose.yml \
          | jq
      else
        echo "Updating stack $STACK_ID ($NORMALIZED_STACK_NAME)"
        COMPOSE_CONTENTS=$(cat deployable-compose.yml)
        JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
          '{"prune": true, "pullImage": true, "stackFileContent": $compose}')
        curl -X PUT \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN" \
          --json "$JSON_PAYLOAD" \
          | jq
      fi

#############################################
# 5) Teardown-job to stop review
#############################################
stop_review:
  stage: teardown
  image: "$CI_REGISTRY_IMAGE/utils:latest"
  environment:
    name: "review-$CI_COMMIT_REF_NAME"
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
  script:
    - |
      set -e

      export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
        --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
        | jq -r '.jwt')

      export STACK_NAME=$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
      echo "STACK: $STACK_NAME"

      export ENDPOINT_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/endpoints \
        | jq -r '.[] | select(.Name == "primary") | .Id')

      echo "Endpoint: $ENDPOINT_ID"

      NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

      echo "Checking if stack $NORMALIZED_STACK_NAME is present..."
      STACK_ID=$(curl -sSL \
        -H "Authorization: Bearer $PORTAINER_TOKEN" \
        https://portainer.cc25.chasacademy.dev/api/stacks \
        | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

      echo "Stack id: \"$STACK_ID\""

      if [ -z "$STACK_ID" ]
      then
        echo "Stack $STACK_ID $STACK_NAME not found!"
        exit 1

      else 
        echo "Deleting stack $STACK_ID ($STACK_NAME)"
        response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
          "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
          -H "Authorization: Bearer $PORTAINER_TOKEN")

        if [ "$response" -eq 204 ]; then
          echo "Stack $STACK_ID successfully deleted."
        else
          echo "Failed to delete stack $STACK_ID. HTTP status code: $response"
          exit 1
        fi
      fi

